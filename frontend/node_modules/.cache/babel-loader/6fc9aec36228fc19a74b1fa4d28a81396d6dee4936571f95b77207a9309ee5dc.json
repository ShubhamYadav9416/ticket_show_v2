{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport refreshAccessToken from '../../../utils/refreshToken';\nimport AdminHeader from '../../../components/AdminHeader';\nexport default {\n  name: 'LinkTheaterMovie',\n  data() {\n    return {\n      movies: {},\n      theaters: {},\n      selected_movie_id: '',\n      selected_theater_id: '',\n      ticket_price: '',\n      run_time: '' // 2023-07-14T19:35         \n    };\n  },\n\n  created() {\n    this.allMovies();\n    this.allTheaters();\n  },\n  methods: {\n    async allMovies() {\n      try {\n        let access_token = localStorage.getItem('access_token');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n        const moviesResponse = await axios.get('http://127.0.0.1:8081/api/movie');\n        this.movies = moviesResponse.data;\n        // console.log(this.movies)\n        if (this.movies.length > 0) {\n          console.log(\"Movie data fletch\");\n        } else {\n          console.log(\"No movie ceated\");\n          this.$route.push('/admin/movie');\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          await refreshAccessToken();\n          await this.allMovies();\n        } else if (error.response) {\n          console.error(error);\n          alert('An error occurred while fetching the movie data.');\n        }\n      }\n    },\n    async allTheaters() {\n      try {\n        let access_token = localStorage.getItem('access_token');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n        const theatersResponse = await axios.get('http://127.0.0.1:8081/api/theater');\n        this.theaters = theatersResponse.data;\n        // console.log(this.theaters)\n        if (this.theaters.length > 0) {\n          console.log(\"Theater data fetched\");\n        } else {\n          console.log(\"No theater ceated\");\n          this.$route.push('/admin/theater');\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          await refreshAccessToken();\n          await this.alltheaters();\n        } else if (error.response) {\n          console.error(error);\n          alert('An error occurred while fetching the theater data.');\n        }\n      }\n    },\n    async addMovie() {\n      if (!this.movie.movie_name || !this.movie.movie_tag || !this.movie.movie_language || !this.movie.movie_duration || !this.movie.movie_description) {\n        alert(\"All fields are required !!\");\n        return;\n      }\n      let formData = new FormData();\n      formData.append('data', JSON.stringify(this.movie));\n      if (this.movie_poster) {\n        formData.append('movie_poster', this.movie_poster);\n      }\n      console.log(this.movie_poster);\n      try {\n        let access_token = localStorage.getItem('access_token');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n        await axios.post(\"http://127.0.0.1:8081/api/movie\", formData);\n        console.log(formData.data);\n        this.$router.push(\"/admin/movie\");\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          await refreshAccessToken();\n          await this.addMovie();\n        } else if (error.response && error.response.status === 400 || error.response.status === 422) {\n          this.errors = error.response.data.errors;\n          console.log(error);\n          alert('An error occurred while creating movie');\n        } else if (error.response && error.response.status === 409) {\n          alert(error.response.data.message);\n        }\n      }\n    }\n  },\n  components: {\n    'admin-header': AdminHeader\n  }\n};","map":{"version":3,"names":["axios","refreshAccessToken","AdminHeader","name","data","movies","theaters","selected_movie_id","selected_theater_id","ticket_price","run_time","created","allMovies","allTheaters","methods","access_token","localStorage","getItem","defaults","headers","common","moviesResponse","get","length","console","log","$route","push","error","response","status","alert","theatersResponse","alltheaters","addMovie","movie","movie_name","movie_tag","movie_language","movie_duration","movie_description","formData","FormData","append","JSON","stringify","movie_poster","post","$router","errors","message","components"],"sources":["src/views/admin/theater_movie/LinkTheaterMovie.vue"],"sourcesContent":["<template>\n    <div id=\"outer_div\">\n        <admin-header></admin-header>\n        <div class=\"container text-center\">\n            <div class=\"row\">\n                <div class=\"col-4\">\n\n                </div>\n                <div class=\"col\">\n                    <br><br>\n                    <p>To add Movie at Theater<br> Fill this form</p>\n                    <form>\n                        <div class=\"mb-3\">\n                            <label class=\"form-label\">Select Theater</label>\n                            <select class=\"form-select\" v-for=\"theater in theaters\" :key=\"theater.theater_id\"\n                                v-model=\"selected_theater_id\">\n                                <option selected disabled value=\"\">Choose Theater...</option>\n                                <option :value=theater.theater_id>{{ theater.theater_name }} {{ theater.theater_place }}\n                                </option>\n                            </select>\n                        </div>\n\n                        <div class=\"mb-3\">\n                            <label class=\"form-label\">Select Movie</label>\n                            <select class=\"form-select\" v-for=\"movie in movies\" :key=\"movie.movie_id\"\n                                v-model=\"selected_movie_id\">\n                                <option selected disabled value=\"\">Choose Movie...</option>\n                                <option :value=movie.movie_id>{{ movie.movie_name }}</option>\n                            </select>\n                        </div>\n\n                        <div class=\"mb-3\">\n                            <input type=\"number\" class=\"form-control\" v-model=\"ticket_price\" required\n                                placeholder=\"Ticket Price\">\n                        </div>\n                        <div class=\"mb-3\">\n                            <input class=\"form-control\" type=\"datetime-local\" name=\"showtime\" v-model=\"run_time\">\n                        </div>\n\n                        <button type=\"button\" class=\"btn btn-primary\" @click=\"linkTheaterMovie()\">Add</button>\n                    </form>\n                </div>\n                <div class=\"col-4\">\n                    <span style=\"padding-left:5%\">Your Choice is: {{ ticket_price }}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n\nimport axios from 'axios';\n\nimport refreshAccessToken from '../../../utils/refreshToken'\nimport AdminHeader from '../../../components/AdminHeader'\n\nexport default {\n    name: 'LinkTheaterMovie',\n    data() {\n        return {\n            movies: {},\n            theaters: {},\n            selected_movie_id: '',\n            selected_theater_id: '',\n            ticket_price: '',\n            run_time: '',   // 2023-07-14T19:35         \n        }\n    },\n    created() {\n        this.allMovies()\n        this.allTheaters()\n    },\n    methods: {\n        async allMovies() {\n            try {\n                let access_token = localStorage.getItem('access_token')\n\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token\n\n                const moviesResponse = await axios.get('http://127.0.0.1:8081/api/movie')\n                this.movies = moviesResponse.data\n                // console.log(this.movies)\n                if (this.movies.length > 0) {\n                    console.log(\"Movie data fletch\")\n                }\n                else {\n                    console.log(\"No movie ceated\")\n                    this.$route.push('/admin/movie')\n\n                }\n            } catch (error) {\n                if (error.response && error.response.status === 401) {\n                    await refreshAccessToken()\n                    await this.allMovies()\n                }\n\n                else if (error.response) {\n                    console.error(error)\n                    alert('An error occurred while fetching the movie data.')\n                }\n            }\n        },\n        async allTheaters() {\n            try {\n                let access_token = localStorage.getItem('access_token')\n\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token\n                const theatersResponse = await axios.get('http://127.0.0.1:8081/api/theater')\n\n                this.theaters = theatersResponse.data\n                // console.log(this.theaters)\n                if (this.theaters.length > 0) {\n                    console.log(\"Theater data fetched\")\n                }\n                else {\n                    console.log(\"No theater ceated\")\n                    this.$route.push('/admin/theater')\n                }\n            }\n            catch (error) {\n                if (error.response && error.response.status === 401) {\n                    await refreshAccessToken()\n                    await this.alltheaters()\n                }\n\n                else if (error.response) {\n                    console.error(error)\n                    alert('An error occurred while fetching the theater data.')\n                }\n            }\n        },\n        async addMovie() {\n            if (!this.movie.movie_name || !this.movie.movie_tag || !this.movie.movie_language || !this.movie.movie_duration || !this.movie.movie_description) {\n                alert(\"All fields are required !!\");\n                return;\n            }\n\n            let formData = new FormData()\n\n            formData.append('data', JSON.stringify(this.movie))\n\n            if (this.movie_poster) {\n                formData.append('movie_poster', this.movie_poster)\n            }\n            console.log(this.movie_poster)\n            try {\n                let access_token = localStorage.getItem('access_token')\n\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token\n\n                await axios.post(\"http://127.0.0.1:8081/api/movie\", formData)\n                console.log(formData.data)\n                this.$router.push(\"/admin/movie\");\n            }\n            catch (error) {\n                if (error.response && error.response.status === 401) {\n                    await refreshAccessToken();\n                    await this.addMovie();\n                }\n\n                else if (error.response && error.response.status === 400 || error.response.status === 422) {\n                    this.errors = error.response.data.errors;\n                    console.log(error)\n                    alert('An error occurred while creating movie')\n                }\n\n                else if (error.response && error.response.status === 409) {\n                    alert(error.response.data.message)\n                }\n            }\n\n        },\n    },\n    components: {\n        'admin-header': AdminHeader\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}