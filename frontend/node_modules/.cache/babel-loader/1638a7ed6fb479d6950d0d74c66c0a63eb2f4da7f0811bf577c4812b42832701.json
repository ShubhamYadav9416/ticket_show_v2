{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport refreshAccessToken from '../../../utils/refreshToken';\nimport AdminHeader from '../../../components/AdminHeader';\nexport default {\n  name: 'EditMovie',\n  data() {\n    return {\n      movie_id: this.$route.params.id,\n      movie: {},\n      movie_name: '',\n      movie_tag: '',\n      movie_language: '',\n      movie_duration: '',\n      movie_description: ''\n    };\n  },\n  created() {\n    this.fetchMovie();\n  },\n  methods: {\n    async fetchMovie() {\n      try {\n        let access_token = localStorage.getItem('access_token');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n        const movieResponse = await axios.get(`http://127.0.0.1:8081/api/movie/${this.movie_id}`);\n        this.movie = movieResponse.data;\n        this.movie_name = this.movie.movie_name;\n        this.movie_tag = this.movie.movie_tag;\n        this.movie_language = this.movie.movie_language;\n        this.movie_duration = this.movie.movie_duration;\n        this.movie_description = this.movie.movie_description;\n        console.log(this.movie.movie_name);\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          await refreshAccessToken();\n          await this.fetchMovie();\n        } else if (error.response) {\n          console.error(error);\n          alert('An error occurred while fetching the movie data.');\n        }\n      }\n    },\n    async editMovie() {\n      if (!this.movie_name || !this.movie_tag || !this.movie_language || !this.movie_duration || !this.movie_description) {\n        alert(\"All fields are required !!\");\n        return;\n      }\n      try {\n        let access_token = localStorage.getItem('access_token');\n        axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token;\n        await axios.put(`http://127.0.0.1:8081/api/movie/${this.movie_id}`, {\n          movie_name: this.movie_name,\n          movie_tag: this.movie_tag,\n          movie_language: this.movie_language,\n          movie_duration: this.movie_duration,\n          movie_description: this.movie_description\n        });\n        this.$router.push(\"/admin/movie\");\n      } catch (error) {\n        if (error.response && error.response.status === 401) {\n          await refreshAccessToken();\n          await this.editMovie();\n        } else if (error.response && error.response.status === 400 || error.response.status === 422) {\n          this.errors = error.response.data.errors;\n          alert('An error occurred while creating theater.');\n        }\n      }\n    }\n  },\n  components: {\n    'admin-header': AdminHeader\n  }\n};","map":{"version":3,"names":["axios","refreshAccessToken","AdminHeader","name","data","movie_id","$route","params","id","movie","movie_name","movie_tag","movie_language","movie_duration","movie_description","created","fetchMovie","methods","access_token","localStorage","getItem","defaults","headers","common","movieResponse","get","console","log","error","response","status","alert","editMovie","put","$router","push","errors","components"],"sources":["src/views/admin/movies/EditMovie.vue"],"sourcesContent":["<template>\n<div id=\"outer_div\">\n        <admin-header></admin-header>\n        <div class=\"container text-center\">\n          <div class=\"row\">\n                <div class=\"col-4\">\n\n                </div>\n                <div class=\"col\">\n                    <br><br>\n                    <p>To add new Theater<br> Fill this form</p>\n                    <form>\n                        <div class=\"mb-3\">\n                            <input type=\"text\" class=\"form-control\" v-model=\"movie_name\" required\n                      placeholder=\"Movie Name\" >\n                        </div>\n                        <div class=\"mb-3\">\n                            <input type=\"text\" class=\"form-control\" v-model=\"movie_tag\" required\n                                placeholder=\"Movie Tag\">\n                        </div>\n                        <div class=\"mb-3\">\n                            <input type=\"text\" class=\"form-control\" v-model=\"movie_language\" required\n                                placeholder=\"Movie Language\" >\n                        </div>\n                        <div class=\"mb-3\">\n                            <input type=\"text\" class=\"form-control\" v-model=\"movie_duration\" required\n                                placeholder=\"Movie Duration\">\n                        </div>\n                        <div class=\"mb-3\">\n                            <input type=\"text\" class=\"form-control\" v-model=\"movie_description\" required\n                                placeholder=\"Movie Description\">\n                        </div>\n                        <div class=\"input-group mb-3\">\n                            <input type=\"file\" class=\"form-control\" id=\"inputGroupFile01\">\n                        </div>\n                        <button type=\"button\" class=\"btn btn-primary\" @click=\"editMovie()\">Edit Theater</button>\n                    </form>\n                </div>\n                <div class=\"col-4\">\n\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport refreshAccessToken from '../../../utils/refreshToken';\n\nimport AdminHeader from '../../../components/AdminHeader'\n\n\nexport default {\n    name: 'EditMovie',\n    data(){\n        return {\n            movie_id : this.$route.params.id,\n            movie: {},\n            movie_name: '',\n            movie_tag: '',\n            movie_language: '',\n            movie_duration: '',\n            movie_description: '',\n        }\n    },\n    created(){\n        this.fetchMovie()\n    },\n    methods: {\n        async fetchMovie(){\n            try{\n                let access_token = localStorage.getItem('access_token')\n\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token\n\n                const movieResponse = await axios.get(`http://127.0.0.1:8081/api/movie/${this.movie_id}`)\n                this.movie = movieResponse.data\n                this.movie_name = this.movie.movie_name\n                this.movie_tag = this.movie.movie_tag\n                this.movie_language = this.movie.movie_language\n                this.movie_duration = this.movie.movie_duration\n                this.movie_description = this.movie.movie_description\n                console.log(this.movie.movie_name)\n            }\n            catch (error) {\n                if (error.response && error.response.status === 401) {\n                    await refreshAccessToken()\n                    await this.fetchMovie()\n                }\n\n                else if (error.response) {\n                    console.error(error)\n                    alert('An error occurred while fetching the movie data.')\n                }\n            }\n        },\n        async editMovie() {\n            if (!this.movie_name || !this.movie_tag || !this.movie_language || !this.movie_duration || !this.movie_description) {\n                alert(\"All fields are required !!\");\n                return;\n            }\n            try {\n                let access_token = localStorage.getItem('access_token')\n\n                axios.defaults.headers.common['Authorization'] = 'Bearer ' + access_token\n\n                await axios.put(`http://127.0.0.1:8081/api/movie/${this.movie_id}`, {\n                    movie_name: this.movie_name,\n                    movie_tag: this.movie_tag,\n                    movie_language: this.movie_language,\n                    movie_duration: this.movie_duration,\n                    movie_description: this.movie_description,\n                })\n                this.$router.push(\"/admin/movie\");\n            }\n            catch (error) {\n                if (error.response && error.response.status === 401) {\n                    await refreshAccessToken();\n                    await this.editMovie();\n                }\n\n                else if (error.response && error.response.status === 400 || error.response.status === 422) {\n                    this.errors = error.response.data.errors;\n                    alert('An error occurred while creating theater.')\n                }\n            }\n\n        }\n    },\n    components: {\n        'admin-header': AdminHeader\n    }\n}\n\n</script>"],"mappings":";AA+CA,OAAAA,KAAA;AACA,OAAAC,kBAAA;AAEA,OAAAC,WAAA;AAGA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAC,EAAA;MACAC,KAAA;MACAC,UAAA;MACAC,SAAA;MACAC,cAAA;MACAC,cAAA;MACAC,iBAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,MAAAD,WAAA;MACA;QACA,IAAAE,YAAA,GAAAC,YAAA,CAAAC,OAAA;QAEApB,KAAA,CAAAqB,QAAA,CAAAC,OAAA,CAAAC,MAAA,gCAAAL,YAAA;QAEA,MAAAM,aAAA,SAAAxB,KAAA,CAAAyB,GAAA,yCAAApB,QAAA;QACA,KAAAI,KAAA,GAAAe,aAAA,CAAApB,IAAA;QACA,KAAAM,UAAA,QAAAD,KAAA,CAAAC,UAAA;QACA,KAAAC,SAAA,QAAAF,KAAA,CAAAE,SAAA;QACA,KAAAC,cAAA,QAAAH,KAAA,CAAAG,cAAA;QACA,KAAAC,cAAA,QAAAJ,KAAA,CAAAI,cAAA;QACA,KAAAC,iBAAA,QAAAL,KAAA,CAAAK,iBAAA;QACAY,OAAA,CAAAC,GAAA,MAAAlB,KAAA,CAAAC,UAAA;MACA,EACA,OAAAkB,KAAA;QACA,IAAAA,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,MAAA7B,kBAAA;UACA,WAAAe,UAAA;QACA,OAEA,IAAAY,KAAA,CAAAC,QAAA;UACAH,OAAA,CAAAE,KAAA,CAAAA,KAAA;UACAG,KAAA;QACA;MACA;IACA;IACA,MAAAC,UAAA;MACA,UAAAtB,UAAA,UAAAC,SAAA,UAAAC,cAAA,UAAAC,cAAA,UAAAC,iBAAA;QACAiB,KAAA;QACA;MACA;MACA;QACA,IAAAb,YAAA,GAAAC,YAAA,CAAAC,OAAA;QAEApB,KAAA,CAAAqB,QAAA,CAAAC,OAAA,CAAAC,MAAA,gCAAAL,YAAA;QAEA,MAAAlB,KAAA,CAAAiC,GAAA,yCAAA5B,QAAA;UACAK,UAAA,OAAAA,UAAA;UACAC,SAAA,OAAAA,SAAA;UACAC,cAAA,OAAAA,cAAA;UACAC,cAAA,OAAAA,cAAA;UACAC,iBAAA,OAAAA;QACA;QACA,KAAAoB,OAAA,CAAAC,IAAA;MACA,EACA,OAAAP,KAAA;QACA,IAAAA,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,MAAA7B,kBAAA;UACA,WAAA+B,SAAA;QACA,OAEA,IAAAJ,KAAA,CAAAC,QAAA,IAAAD,KAAA,CAAAC,QAAA,CAAAC,MAAA,YAAAF,KAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,KAAAM,MAAA,GAAAR,KAAA,CAAAC,QAAA,CAAAzB,IAAA,CAAAgC,MAAA;UACAL,KAAA;QACA;MACA;IAEA;EACA;EACAM,UAAA;IACA,gBAAAnC;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}